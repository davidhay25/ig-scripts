#!/usr/bin/env node
/*create an example page containing all the examples in the Guide


*/

let igRoot = "/Users/davidhay/IG/";
let fs = require('fs')
let onlineServer = "http://build.fhir.org/ig/HL7NZ/";   //where the IGs are
let onlineBranch = "/branches/main/";     //currently the dev master branch

let uploadExamples = false;
//let syncRequest = require('../globalScripts/node_modules/sync-request');


//get the IG name
let igName = process.argv[2];   
if (!igName) {
    console.log("No IG specified. Must be in the command eg: ./makeExamplePage nhi")
    return;
}

let fullPath = igRoot + igName;

if ( ! fs.existsSync(fullPath)) {
    console.log("The IG '" + igName + "' does not exist (at least, there is no folder with that name.")
    return;
}

let rootPath = igRoot + igName;     //the path to the root of the IG

let examplesPath = rootPath + "/fsh-generated/resources/"
let outFileName =  rootPath + "/input/pagecontent/exampleInstances.xml";

let hash = {}
let arList = [];        //list of examples
let list = fs.readdirSync(examplesPath);
list.forEach(function(file) {
    //console.log(file)
    let ar = file.split('-');
    //let type = ar[0]

    //we work off the IG
    if (ar[0] == "ImplementationGuide") {
        let fullFileName = examplesPath + file
        let contents = fs.readFileSync(fullFileName).toString()
        let IG = JSON.parse(contents)


        IG.definition.resource.forEach(function(res){
            let ref = res.reference.reference
            let ar = ref.split('/')
            let type = ar[0];

            if ( ['StructureDefinition','SearchParameter','ValueSet','CodeSystem','ImplementationGuide','CapabilityStatement','OperationDefinition'].indexOf(type) == -1) {
   
                /*
                let fileName = type + "-" + ar[1] + '.json'
                let resourceFileName = examplesPath + fileName;
                let contents = fs.readFileSync(resourceFileName).toString()
                let json = JSON.parse(contents)
                */
                hash[type] = hash[type] || []
                hash[type].push({id: ar[1],description:res.description})
                arList.push({id: ar[1],description:res.description,type:type})
            }
            

        })


    }
    
    //console.log(hash)
    //return;
/*
    if ( ['StructureDefinition','SearchParameter','ValueSet','CodeSystem','ImplementationGuide','CapabilityStatement'].indexOf(type) == -1) {
        let fullFileName = examplesPath + file
        let contents = fs.readFileSync(fullFileName).toString()
        let json = JSON.parse(contents)
        hash[type] = hash[type] || []
        hash[type].push(json)
    }
*/
})

//console.log(hash)

let arReport = []
arReport.push("<div xmlns='http://www.w3.org/1999/xhtml'>")
arReport.push("<!-- Generated by the makeProfilesAndExtensions script -->")


//todo - need to code this in some way...
arReport.push("<img src='commonGraph.png' width='800'></img>")


//this is the alphabetical list
arReport.push("<strong class='clearfix'>Alphabetical by description </strong>");
arReport.push("<br/>")
arList.sort(function(a,b){
    if (a.description > b.description) {
        return 1
    } else {
        return -1
    }
})
arReport.push("<table class='table table-bordered table-condensed'>")
arReport.push("<tr><th width='30%'>Description</th><th width='20%'>Type</th><th width='20%'>Id</th></tr>")

arList.forEach(function(res){
    arReport.push("<tr>");

    //let link = onlineServer + igName + onlineBranch + res.type + "-" + res.id + ".html";
    let link = res.type + "-" + res.id + ".html";

    arReport.push("<td><a href='"+link+"'>" + res.description + "</a></td>") 
    arReport.push(`<td>${res.type}</td>`) 
    arReport.push(`<td>${res.id}</td>`) 
    arReport.push("</tr>");
})

arReport.push("</table>")
arReport.push("<br/>")


//this is the list by type
arReport.push("<br/>")
arReport.push("<div><strong>Resources by type</strong></div>");
arReport.push("<br/>")
Object.keys(hash).forEach(function(k) {
    let ar = hash[k]

    arReport.push(`<a name="${k}"> </a>`)                   
    arReport.push(`<h3>${k}</h3>`)

    arReport.push("<table class='table table-bordered table-condensed'>")
    arReport.push("<tr><th width='30%'>Description</th><th width='20%'>Id</th></tr>")
                       
    ar.forEach(function(res){
        //console.log(res)

        arReport.push("<tr>");
        //let link = onlineServer + igName + onlineBranch + k + "-" + res.id + ".html";
        let link =  k + "-" + res.id + ".html";

        arReport.push("<td><a href='"+link+"'>" + res.description + "</a></td>") 
        arReport.push(`<td>${res.id}</td>`) 
        arReport.push("</tr>");

        //arReport.push(`<tr><td>${res.description}</td><td>${res.id}</td></tr>`) 

    })
    arReport.push("</table>");

})

arReport.push("</div>");

//console.log(arReport)
let outContents = arReport.join('\n')


//let outContents = arMD.join('\n')
fs.writeFileSync(outFileName,outContents) 
return;

